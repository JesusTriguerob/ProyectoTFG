package com.backRuix.crud.controller;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.backRuix.crud.dto.Mensaje;
import com.backRuix.crud.dto.UsuarioDto;
import com.backRuix.crud.security.entity.Usuario;
import com.backRuix.crud.security.service.UsuarioService;

@RestController
@RequestMapping("/usuario")
@CrossOrigin(origins = "*")
public class UsuarioController {

	@Autowired
	UsuarioService usuarioService;

	@GetMapping("/lista")
	public ResponseEntity<List<Usuario>> list() {
		List<Usuario> list = usuarioService.list();
		return new ResponseEntity(list, HttpStatus.OK);
	}

	@GetMapping("/detail/{id}")
	public ResponseEntity<Usuario> getById(@PathVariable("id") int id) {
		if (!usuarioService.existsById(id))
			return new ResponseEntity(new Mensaje("no existe"), HttpStatus.NOT_FOUND);
		Usuario Usuario = usuarioService.getOne(id).get();
		return new ResponseEntity(Usuario, HttpStatus.OK);
	}

	@GetMapping("/detailname/{nombre}")
	public ResponseEntity<Usuario> getByNombre(@PathVariable("nombre") String nombre) {
		if (!usuarioService.existsByNombre(nombre))
			return new ResponseEntity(new Mensaje("no existe"), HttpStatus.NOT_FOUND);
		Usuario Usuario = usuarioService.getByNombre(nombre).get();
		return new ResponseEntity(Usuario, HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/create")
    public ResponseEntity<?> create(@RequestBody UsuarioDto usuarioDto){
        if(StringUtils.isBlank(usuarioDto.getNombre()))
            return new ResponseEntity(new Mensaje("el nombre es obligatorio"), HttpStatus.BAD_REQUEST);
        if(StringUtils.isBlank(usuarioDto.getApellido1()))
            return new ResponseEntity(new Mensaje("el primer apellido es obligatorio"), HttpStatus.BAD_REQUEST);
        if(StringUtils.isBlank(usuarioDto.getDni()))
            return new ResponseEntity(new Mensaje("el dni es obligatorio"), HttpStatus.BAD_REQUEST);
        Usuario Usuario = new Usuario(usuarioDto.getNombre(), usuarioDto.getApellido1(), usuarioDto.getApellido2(), usuarioDto.getDni(), usuarioDto.getCalle(),
        		usuarioDto.getNumCalle(), usuarioDto.getTelefono1(), usuarioDto.getFechaNac(), usuarioDto.getLocalidad(),usuarioDto.getProvincia(), usuarioDto.getCodigoPostal(),
        		usuarioDto.getNombreUsuario(), usuarioDto.getEmail(), usuarioDto.getPassword(), usuarioDto.getRoles());
        usuarioService.save(Usuario);
        return new ResponseEntity(new Mensaje("Usuario creado"), HttpStatus.OK);
    }

	@PreAuthorize("hasRole('ADMIN')")
	@PutMapping("/update/{id}")
	public ResponseEntity<?> update(@PathVariable("id") int id, @RequestBody UsuarioDto UsuarioDto) {
		if (!usuarioService.existsById(id))
			return new ResponseEntity(new Mensaje("no existe"), HttpStatus.NOT_FOUND);
		if (usuarioService.existsByNombre(UsuarioDto.getNombre())
				&& usuarioService.getByNombre(UsuarioDto.getNombre()).get().getId() != id)
			return new ResponseEntity(new Mensaje("ese nombre ya existe"), HttpStatus.BAD_REQUEST);
		if (StringUtils.isBlank(UsuarioDto.getNombre()))
			return new ResponseEntity(new Mensaje("el nombre es obligatorio"), HttpStatus.BAD_REQUEST);
		if (UsuarioDto.getPrecio() == null || UsuarioDto.getPrecio() < 0)
			return new ResponseEntity(new Mensaje("el precio debe ser mayor que 0"), HttpStatus.BAD_REQUEST);

		Usuario Usuario = usuarioService.getOne(id).get();
		Usuario.setNombre(UsuarioDto.getNombre());
		Usuario.setPrecio(UsuarioDto.getPrecio());
		usuarioService.save(Usuario);
		return new ResponseEntity(new Mensaje("Usuario actualizado"), HttpStatus.OK);
	}

	@PreAuthorize("hasRole('ADMIN')")
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<?> delete(@PathVariable("id") int id) {
		if (!usuarioService.existsById(id))
			return new ResponseEntity(new Mensaje("no existe"), HttpStatus.NOT_FOUND);
		usuarioService.delete(id);
		return new ResponseEntity(new Mensaje("Usuario eliminado"), HttpStatus.OK);
	}

}
