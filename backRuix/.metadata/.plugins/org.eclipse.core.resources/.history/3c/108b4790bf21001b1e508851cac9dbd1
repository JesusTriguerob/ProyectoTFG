package com.backRuix.crud.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.backRuix.crud.security.entity.Usuario;
import com.backRuix.crud.service.LibroService;
import com.backRuix.crud.service.UsuarioService;

@CrossOrigin(origins = { "http://localhost:4200" })
@RestController
@RequestMapping("/usuario")
public class UsuarioController {

	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private LibroService libroService;

	@GetMapping("/lista")
	public List<Usuario> index() {
		return usuarioService.list();
	}

	@GetMapping("/usuario/{id}")
	public Optional<Usuario> show(@PathVariable int id) {
		return this.usuarioService.getOne(id);
	}

	@PostMapping("/usuario")
	@ResponseStatus(HttpStatus.CREATED)
	public Usuario create(@RequestBody Usuario usuario) {	
	//Generador usuario y contraseña aleatorio.
		//nombre usuario = 3 primeras letras de nombre y apellidos y 3 ultimos numeros dni.
		String nomUsu = usuario.getNombre().substring(0,3).concat(usuario.getApellido1().substring(0,3).concat(usuario.getApellido2().substring(0, 3)).concat(usuario.getDni().substring(5, 8)));
		
		//Contraseña = 4 cifras aleatorias.
		int password = (int)(Math.random()*9999 + 1000);
		
		usuario.setPassword(String.valueOf(password));
		usuario.setNombreUsuario(nomUsu);
		this.usuarioService.save(usuario);
		return usuario;
	}

	@PutMapping("/usuario/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public Usuario update(@RequestBody Usuario usuario, @PathVariable int id) {
		Usuario usuarioUp = this.usuarioService.getOne(id);
		usuarioUp.setNombre(usuario.getNombre());
		usuarioUp.setApellido1(usuario.getApellido1());
		usuarioUp.setApellido2(usuario.getApellido2());
		usuarioUp.setDni(usuario.getDni());
		usuarioUp.setTelefono1(usuario.getTelefono1());
		usuarioUp.setEmail(usuario.getEmail());
		usuarioUp.setCalle(usuario.getCalle());
		usuarioUp.setNumCalle(usuario.getNumCalle());
		usuarioUp.setFechaNac(usuario.getFechaNac());
		usuarioUp.setCodigoPostal(usuario.getCodigoPostal());
		usuarioUp.setLocalidad(usuario.getLocalidad());
		usuarioUp.setProvincia(usuario.getProvincia());
		usuarioUp.setRoles(usuario.getRoles());
		this.usuarioService.save(usuarioUp);
		return usuarioUp;
	}

	@DeleteMapping("/usuario/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void delete(@PathVariable Long id) {
		Usuario currentCliente = this.usuarioService.findById(id);
		this.usuarioService.delete(currentCliente);
	}
}